generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// 회원 기본 정보 
model UserAccount {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userBalance   UserBalance?
  userCoupons   UserCoupon[]
  userCart      UserCart[]
  orders        Order[]
  payments      Payment[]

  @@index([email])
}

// 유저 잔액 정보
model UserBalance {
  id              Int               @id @default(autoincrement())
  userId          Int               @unique
  balance         Decimal
  updatedAt       DateTime          @updatedAt
  user            UserAccount       @relation(fields: [userId], references: [id])
  balanceHistory  BalanceHistory[]

  @@index([userId])
}

// 잔액 변동 이력
model BalanceHistory {
  id              Int           @id @default(autoincrement())
  userBalanceId   Int
  type            BalanceType
  amount          Decimal
  afterBalance    Decimal
  createdAt       DateTime      @default(now())
  userBalance     UserBalance   @relation(fields: [userBalanceId], references: [id])

  @@index([userBalanceId])
}

// 쿠폰 기본 정보
model Coupon {
  id              Int           @id @default(autoincrement())
  name            String
  type            String        // AMOUNT(정액) or PERCENTAGE(정률)
  amount          Decimal
  minOrderAmount  Decimal
  validDays       Int
  isFcfs         Boolean       @default(false)
  createdAt       DateTime      @default(now())
  fcfsCoupons     FcfsCoupon[]
  userCoupons     UserCoupon[]

  @@index([isFcfs])
}

// 선착순 쿠폰 관리
model FcfsCoupon {
  id              Int       @id @default(autoincrement())
  couponId        Int
  totalQuantity   Int
  stockQuantity   Int
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime  @default(now())
  coupon          Coupon    @relation(fields: [couponId], references: [id])

  @@index([couponId])
  @@index([startDate, endDate])
}

// 유저별 보유 쿠폰
model UserCoupon {
  id          Int           @id @default(autoincrement())
  userId      Int
  couponId    Int
  status      CouponStatus
  expiryDate  DateTime
  createdAt   DateTime      @default(now())
  usedAt      DateTime?
  user        UserAccount   @relation(fields: [userId], references: [id])
  coupon      Coupon        @relation(fields: [couponId], references: [id])
  orders      Order[]

  @@unique([userId, couponId]) // 복합 유니크 인덱스 추가
  @@index([status])
  @@index([expiryDate])
}

// 상품 기본 정보
model Product {
  id            Int               @id @default(autoincrement())
  name          String
  basePrice     Decimal
  description   String            @db.Text
  isActive      Boolean
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  productImages ProductImage[]
  variants      ProductVariant[]
  orderItems    OrderItem[]
  userCart      UserCart[]

  @@index([isActive])
  @@index([createdAt])
}

// 상품 이미지
model ProductImage {
  id                Int             @id @default(autoincrement())
  productId         Int
  productVariantId  Int?
  imageUrl          String
  sequence          Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  product           Product         @relation(fields: [productId], references: [id])
  productVariant    ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@index([productId])
  @@index([productVariantId])
}

// 상품 옵션 및 재고 관리
model ProductVariant {
  id              Int             @id @default(autoincrement())
  productId       Int
  optionName      String
  stockQuantity   Int
  price           Decimal
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  product         Product         @relation(fields: [productId], references: [id])
  productImages   ProductImage[]
  orderItems      OrderItem[]
  userCart        UserCart[]

  @@unique([productId, optionName])
  @@index([productId])
  @@index([stockQuantity])
}

// 주문 정보
model Order {
  id              Int           @id @default(autoincrement())
  userId          Int
  couponId        Int?
  totalAmount     Decimal
  discountAmount  Decimal
  finalAmount     Decimal
  status          OrderStatus
  orderedAt       DateTime      @default(now())
  paidAt          DateTime?
  user            UserAccount   @relation(fields: [userId], references: [id])
  coupon          UserCoupon?   @relation(fields: [couponId], references: [id])
  orderItems      OrderItem[]
  payments        Payment[]

  @@index([userId])
  @@index([status])
  @@index([orderedAt])
}

// 주문 상품 상세
model OrderItem {
  id              Int            @id @default(autoincrement())
  orderId         Int
  productId       Int
  optionVariantId Int
  quantity        Int
  unitPrice       Decimal
  totalPrice      Decimal
  createdAt       DateTime       @default(now())
  order           Order          @relation(fields: [orderId], references: [id])
  product         Product        @relation(fields: [productId], references: [id])
  productVariant  ProductVariant @relation(fields: [optionVariantId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([optionVariantId])
}

// 장바구니
model UserCart {
  id              Int            @id @default(autoincrement())
  userId          Int
  productId       Int
  optionVariantId Int
  quantity        Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            UserAccount    @relation(fields: [userId], references: [id])
  product         Product        @relation(fields: [productId], references: [id])
  productVariant  ProductVariant @relation(fields: [optionVariantId], references: [id])

  @@index([userId])
  @@index([productId])
  @@index([optionVariantId])
}

// 결제 정보 
model Payment {
  id              Int             @id @default(autoincrement())
  orderId         Int
  userId          Int
  paymentMethod   String          // 카드/가상계좌/간편결제 등
  amount          Decimal
  status          PaymentStatus
  pgTransactionId String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  order           Order           @relation(fields: [orderId], references: [id])
  user            UserAccount     @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum OrderStatus {
  PENDING
  PAID  
  SHIPPING
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum CouponStatus {
  AVAILABLE
  USED
  EXPIRED
}

enum BalanceType {
  CHARGE
  USE
  REFUND
}